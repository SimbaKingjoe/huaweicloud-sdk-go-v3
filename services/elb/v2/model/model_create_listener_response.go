/*
 * ELB
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 */

package model

import (
	"encoding/json"
	"errors"
	"github.com/huaweicloud/huaweicloud-sdk-go-v3/core/converter"
	"strings"
)

// Response Object
type CreateListenerResponse struct {
	// 监听器ID
	Id *string `json:"id,omitempty"`
	// 监听器所在的项目ID。
	TenantId *string `json:"tenant_id,omitempty"`
	// 监听器名称。
	Name *string `json:"name,omitempty"`
	// 监听器的描述信息
	Description *string `json:"description,omitempty"`
	// 监听器的管理状态。只支持设定为true，该字段的值无实际意义。
	AdminStateUp *bool `json:"admin_state_up,omitempty"`
	// 监听器绑定的负载均衡器ID的列表。
	Loadbalancers *[]ResourceList `json:"loadbalancers,omitempty"`
	// 监听器的最大连接数。该字段为预留字段，暂未启用。默认为-1。
	ConnectionLimit *int32 `json:"connection_limit,omitempty"`
	// HTTP2功能的开启状态。该字段只有当监听器的协议是TERMINATED_HTTPS时生效。
	Http2Enable *bool `json:"http2_enable,omitempty"`
	// 监听器的监听协议
	Protocol *CreateListenerResponseProtocol `json:"protocol,omitempty"`
	// 监听器的监听端口。
	ProtocolPort *int32 `json:"protocol_port,omitempty"`
	// 监听器的默认后端云服务器组ID。当请求没有匹配的转发策略时，转发到默认后端云服务器上处理。
	DefaultPoolId *string `json:"default_pool_id,omitempty"`
	// 监听器使用的服务器证书ID。
	DefaultTlsContainerRef *string `json:"default_tls_container_ref,omitempty"`
	// 监听器使用的CA证书ID。
	ClientCaTlsContainerRef *string `json:"client_ca_tls_container_ref,omitempty"`
	// 监听器使用的SNI证书（带域名的服务器证书）ID的列表。
	SniContainerRefs *[]string `json:"sni_container_refs,omitempty"`
	// 监听器的标签。
	Tags *[]string `json:"tags,omitempty"`
	// 监听器的创建时间。
	CreatedAt *string `json:"created_at,omitempty"`
	// 监听器的更新时间。
	UpdatedAt     *string       `json:"updated_at,omitempty"`
	InsertHeaders *InsertHeader `json:"insert_headers,omitempty"`
	// 监听器所在的项目ID。
	ProjectId *string `json:"project_id,omitempty"`
	// 监听器使用的安全策略，仅对TERMINATED_HTTPS协议类型的监听器有效，且默认值为tls-1-0。  取值包括：tls-1-0, tls-1-1, tls-1-2, tls-1-2-strict多种安全策略
	TlsCiphersPolicy *string `json:"tls_ciphers_policy,omitempty"`
	HttpStatusCode   int     `json:"-"`
}

func (o CreateListenerResponse) String() string {
	data, _ := json.Marshal(o)
	return strings.Join([]string{"CreateListenerResponse", string(data)}, " ")
}

type CreateListenerResponseProtocol struct {
	value string
}

type CreateListenerResponseProtocolEnum struct {
	UDP              CreateListenerResponseProtocol
	TCP              CreateListenerResponseProtocol
	HTTP             CreateListenerResponseProtocol
	TERMINATED_HTTPS CreateListenerResponseProtocol
}

func GetCreateListenerResponseProtocolEnum() CreateListenerResponseProtocolEnum {
	return CreateListenerResponseProtocolEnum{
		UDP: CreateListenerResponseProtocol{
			value: "UDP",
		},
		TCP: CreateListenerResponseProtocol{
			value: "TCP",
		},
		HTTP: CreateListenerResponseProtocol{
			value: "HTTP",
		},
		TERMINATED_HTTPS: CreateListenerResponseProtocol{
			value: "TERMINATED_HTTPS",
		},
	}
}

func (c CreateListenerResponseProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.value)
}

func (c *CreateListenerResponseProtocol) UnmarshalJSON(b []byte) error {
	myConverter := converter.StringConverterFactory("string")
	if myConverter != nil {
		val, err := myConverter.CovertStringToInterface(strings.Trim(string(b[:]), "\""))
		if err == nil {
			c.value = val.(string)
			return nil
		}
		return err
	} else {
		return errors.New("convert enum data to string error")
	}
}
